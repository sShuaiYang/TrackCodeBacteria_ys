function clusterTree=testClusterTree(clusterTree,dirSave,step,bioTree,bacteriaFrameInfo)
cd(dirSave)
beginOne=step+1-mod(200,step)+200;
timeInterval=[beginOne:step:size(clusterTree,2),size(clusterTree,2)];

% generate weighted tree
for i=timeInterval
    clusterTree{i}.weightedMatrix=weightedNetwork1(clusterTree,bioTree,bacteriaFrameInfo,i);
end
% clusterParemeter include 4 small maps
% cluster coefficient vs time, average degree vs time,
% maxCluster ratio vs time and average distance vs time
h1=clusterParameterFunction(clusterTree,timeInterval);
saveas(h1,'clusterParameterFigure.fig')

% here is the degree distribution for different frames
dirSave2=strcat(dirSave,'\degreeDistribution');
mkdir(dirSave2)
cd(dirSave2)
for i=timeInterval
% for i=12460
    [~,degreeDistribution]=getDistDistribution(clusterTree{i}.distMatrix,clusterTree{i}.bacteriaList);
    if size(degreeDistribution,2)>=100
        degreeDistribution(2,:)=degreeDistribution(2,:)/max(degreeDistribution(2,:));
        p=polyfit(log(degreeDistribution(1,1:54)),log(degreeDistribution(2,1:54)),1);
        newY=exp(polyval(p,log(degreeDistribution(1,1:60))));
        p(1)=p(1)-1;
    else
        newY=[];
        p=[];
    end
    if ~isempty(degreeDistribution)
        h2=createDegreeDistributionfigure(degreeDistribution(1,:), degreeDistribution(2,:),i,newY,p);
        saveas(h2,strcat(num2str(i),'.fig'));
        saveas(h2,strcat(num2str(i),'.tif'));
    end
    close all
end

% create the spectrun of adjacent matrix
cd(dirSave)
makeAdjacentMatrix(clusterTree{end}.distMatrix);
saveas(gcf,'adjacentSpectrum.fig');
close all

% create the spectrum of laplacian matrix
makeGraphLaplacian(clusterTree{end}.distMatrix);
saveas(gcf,'LaplacianSpectrum.fig');
close all

% detachingCaseFigure(clusterTree,bioTree);

% mean-square radius of gyration
radiusVsDegree(clusterTree{end},bioTree);
end
%% paremeter function
function h=clusterParameterFunction(clusterTree,timeInterval)
for i=1:size(clusterTree,2)
    clusterCoeficient(i,2)=clusterTree{i}.clusterCoeficient;
end
clusterCoeficient(:,1)=1:size(clusterTree,2);
for i=1:size(clusterTree,2)
    averageDegree(i,2)=clusterTree{i}.averageDegree;
end
averageDegree(:,1)=1:size(clusterTree,2);
num=0;
ratio=[];
aveDist=[];
for i=timeInterval;
    num=num+1;
    ratio=[ratio;[i,clusterTree{i}.networkSizeInfo(3)]];
    aveDist=[aveDist;[i,clusterTree{i}.averageDistance]];
end
h=clusterParameterFigure(averageDegree(:,1),averageDegree(:,2),clusterCoeficient(:,1),clusterCoeficient(:,2),...
    ratio(:,1),ratio(:,2),aveDist(:,1),aveDist(:,2));
end
function [bacteriaList,regionHist]=getDistDistribution(distMatrix,bacteriaList)
for i=1:size(distMatrix,2)
    iLine=distMatrix(i,:);
    degreeNum(i)=numel(iLine(iLine==1));
    bacteraiaList(i,6)=degreeNum(i);
end
maxDegree=max(degreeNum);
regionHist(1,:)=1:maxDegree;
for i=1:maxDegree
    regionHist(2,i)=numel(degreeNum(degreeNum>=i));
end
end
function fencengSurvive
for iBranch=1:max(bacteriaList(:,5))
    b=[];
    for i=1:size(bacteriaList,1)
        iLine=distMatrix(i,:);
        if bacteriaList(i,5)==iBranch
            b=[b;numel(iLine(iLine==1))];
        end
    end
    regionHist=[];
    maxDegree=max(b);
    regionHist(1,:)=min(b):maxDegree;
    for i=min(b):maxDegree
        regionHist(2,i-min(b)+1)=numel(b(b>=i));
    end
    if numel(regionHist)>1
    hold on;plot(regionHist(1,:),regionHist(2,:))
    end
end
end
function h=clusterParameterFigure(X1, Y1, X2, Y2, X3, Y3, X4, Y4)
%CREATEFIGURE(X1,Y1,Y2,X2,Y3,Y4)
%  X1:  vector of x data
%  Y1:  vector of y data
%  Y2:  vector of y data
%  X2:  vector of x data
%  Y3:  vector of y data
%  Y4:  vector of y data

%  Auto-generated by MATLAB on 26-Oct-2012 11:36:40

% Create figure
figure1 = figure;
scrsz=get(0,'ScreenSize');
set(gcf,'PaperPositionMode','auto');
set(gcf,'Position',[1 1 scrsz(3) scrsz(4)]);

% Create axes
axes1 = axes('Parent',figure1,...
    'Position',[0.0888541666666666 0.583661770336842 0.297604166666667 0.312025128769444]);
box(axes1,'on');
hold(axes1,'all');

% Create plot
plot(X1,Y1,'Parent',axes1);

% Create ylabel
ylabel('average Degree','FontSize',16);

% Create axes
axes2 = axes('Parent',figure1,...
    'Position',[0.0888541666666666 0.135394456289979 0.300729166666667 0.377486774154529]);
box(axes2,'on');
hold(axes2,'all');

% Create plot
plot(X2,Y2,'Parent',axes2);

% Create xlabel
xlabel({'frame'},'FontSize',16);

% Create ylabel
ylabel('cluster Coefficient','FontSize',16);

% Create axes
axes3 = axes('Parent',figure1,...
    'Position',[0.421145833333331 0.145566251230399 0.299687500000001 0.750727435971073]);
box(axes3,'on');
hold(axes3,'all');

% Create plot
plot(X3,Y3,'Parent',axes3);

% Create xlabel
xlabel('frame','FontSize',16);

% Create ylabel
ylabel('maxCluster/nodeNum','FontSize',16);

% Create axes
axes4 = axes('Parent',figure1,...
    'Position',[0.752604166666667 0.139987450672519 0.203125 0.750727435971073]);
box(axes4,'on');
hold(axes4,'all');

% Create plot
plot(X4,Y4,'Parent',axes4);

% Create xlabel
xlabel('frame','FontSize',16);

% Create ylabel
ylabel('average distance','FontSize',16);

h=gca;
end
function [averageDistance,maxArea,matrixSize]=getAverageDistance(distMatrix)
gObj=biograph(distMatrix);
matrixSize=size(distMatrix,1);
[~,C]=conncomp(gObj,'directed','false');
c=sort(C);
cc=regionprops(c,'FilledArea');
maxArea=0;
for i=1:size(cc,1)
    if cc(i).FilledArea>maxArea
        maxArea=cc(i).FilledArea;
        maxNum=i;
    end
end
if maxArea>=100
    newDist=allshortestpaths(gObj);
    averageDistance=mean(newDist(newDist~=inf));
else
    averageDistance=0;
end
end
%% degree distribution
function h=createDegreeDistributionfigure(X1, Y1,i,newY,p)
%CREATEFIGURE(X1,Y1)
%  X1:  vector of x data
%  Y1:  vector of y data

%  Auto-generated by MATLAB on 24-Oct-2012 09:57:36

% Create figure
figure1 = figure();
scrsz=get(0,'ScreenSize');
set(gcf,'PaperPositionMode','auto');
set(gcf,'Position',[1 1 scrsz(3) scrsz(4)]);

% Create axes
axes1 = axes('Parent',figure1,'YScale','log','YMinorTick','on',...
    'XScale','log',...
    'XMinorTick','on',...
    'Position',[0.354479166666666 0.122686000234331 0.2809375 0.698683853459973],...
    'PlotBoxAspectRatio',[1 1 1]);
box(axes1,'on');
hold(axes1,'all');

% Create loglog
loglog(X1,Y1,'Marker','o','LineStyle','none');

% Create xlabel
xlabel('degree','FontSize',20);

% Create ylabel
ylabel('percent','FontSize',20);

% Create title
title(strcat('degree distribution£¨',num2str(i),'frame£©'),'FontSize',20);

if ~isempty(p)
    hold on; plot(X1(1:numel(newY)),newY,'Color',[1,0,0])
    
    % Create textbox
    annotation(figure1,'textbox',...
        [0.4150625 0.64 0.0672010135135137 0.0558934517203116],'String',{strcat('k=',num2str(p(1)))},...
        'FontSize',16,...
        'FitBoxToText','off',...
        'LineStyle','none');
end

h=gca;
end
%% detaching vs degree
function detachingCaseFigure(clusterTree,bioTree)
frameNum=size(clusterTree,2);
bacteriaInfo=clusterTree{end}.bacteriaList;
distMatrix=clusterTree{end}.distMatrix;
detachingCaseInfo=[];
hyperNodeBeginInfo=[];
for i=1:size(bacteriaInfo,1)
    bacInfo=bacteriaInfo(i,:);
    distInfo=distMatrix(i,:);
    degreeNum=numel(distInfo(distInfo==1));
    if degreeNum>=100
        if bacInfo(3)~=0
            beginInfo=[bacInfo(1),bacInfo(2),bacInfo(4)];
            while bioTree{beginInfo(1)}.node{beginInfo(2)}.In{1}.isNode==1
                beginInfo=bioTree{beginInfo(1)}.node{beginInfo(2)}.In{1}.nodeInfo;
            end
            beginInfo=bioTree{beginInfo(1)}.node{beginInfo(2)}.In{1}.rootInfo;
        end
        hyperNodeBeginInfo=[hyperNodeBeginInfo;[beginInfo(1),degreeNum]];
    end
    if bacInfo(1)+bacInfo(4)-1~=frameNum
        detachingCaseInfo=[detachingCaseInfo;[bacInfo(1)+bacInfo(2),degreeNum]];
    end
end
h=createDetachingCaseDegreeVsTime(detachingCaseInfo(:,1),detachingCaseInfo(:,2),hyperNodeBeginInfo(:,1),hyperNodeBeginInfo(:,2));
saveas(h,'detachingCaseDegree & hyperNode VsTime.fig')
end
function h=createDetachingCaseDegreeVsTime(X1, Y1, X2, Y2)
%CREATEFIGURE(X1,Y1)
%  X1:  vector of x data
%  Y1:  vector of y data

%  Auto-generated by MATLAB on 30-Nov-2012 19:52:33

% Create figure
figure1 = figure();

% Create axes
axes1 = axes('Parent',figure1,...
    'Position',[0.325745680596285 0.551686615886834 0.329951165752351 0.38966629535608]);
xlim(axes1,[0 max(X1)]+10);
ylim(axes1,[0 max(Y1)+10]);
box(axes1,'on');
hold(axes1,'all');

% Create plot
plot(X1,Y1,'Parent',axes1,'Marker','*','LineStyle','none',...
    'DisplayName','detachingCase');

% Create xlabel
xlabel('Time','Interpreter','none','FontSize',24);

% Create ylabel
ylabel('degree','FontSize',24);

% Create title
title('detaching case degree vs time','FontSize',20);

% Create legend
legend1 = legend(axes1,'show');
set(legend1,'EdgeColor',[1 1 1],'YColor',[1 1 1],'XColor',[1 1 1],...
    'Position',[0.337673611111111 0.869595025334962 0.1390625 0.0471527022125499],...
    'FontSize',24);

% Create axes
axes2 = axes('Parent',figure1,...
    'Position',[0.324479166666667 0.055 0.3328125 0.393313384113166]);
box(axes2,'on');
hold(axes2,'all');

% Create title
title('hyperNode degree vs begin time','FontSize',20);

% Create xlabel
xlabel('Time','FontSize',24);

% Create ylabel
ylabel('degree','FontSize',24);

% Create plot
plot(X2,Y2,'Parent',axes2,'Marker','^','LineStyle','none');
h=gcf;
end
%% other function
function pResult=createSpectralDensity(distMatrix)
eigenvalue=eig(double(distMatrix));
nodeNum=size(distMatrix,1);
possibleLink=(numel(distMatrix(distMatrix==1))/2)/(nodeNum*(nodeNum-1)/2);
constFix=(possibleLink*(1-possibleLink)*nodeNum).^0.5;
pResult=gaussianConvolution(eigenvalue,constFix);
standardX=-4*constFix:0.01:6*constFix;
standardY=(4*nodeNum*possibleLink*(1-possibleLink)-standardX.^2).^0.5/2/pi/(nodeNum*possibleLink*(1-possibleLink));
end
function pResult=countHist(originalData,constFix)
% allNum=unique(originalData);
% pResult=[];
% for iNum=1:numel(allNum)
%     pHist=numel(originalData(originalData==allNum(iNum)));
%     pResult=[pResult;allNum(iNum),pHist];
% end
p=linspace(-4*constFix,6*constFix,401);
interval=p(3)-p(1);
pResult=[];
for iNum=2:2:numel(p)-1
    pHist=0;
    for i=1:numel(originalData)
        if originalData(i)>=p(iNum-1) && originalData(i)<p(iNum+1)
            pHist=pHist+1;
        end
    end
    pResult=[pResult;p(iNum),pHist/interval];
end
end
function pResult=gaussianConvolution(eigenvalue,constFix)
x=-4*constFix:0.001*constFix:6*constFix;
parfor i=1:numel(eigenvalue)
    sigma=0.025;
   gaussianResult{i}=1/((2*pi)^0.5*sigma)*exp(-(x-eigenvalue(i)).^2/2/sigma^2);
end
xResult=[];
for i=1:numel(eigenvalue)
    if i==1
        xResult=gaussianResult{i};
    else
    xResult=xResult+gaussianResult{i};
    end
end
xResult=xResult/numel(eigenvalue);
pResult=cat(2,x',xResult');
end
function h=SpectralDensity(X1, Y1, X2, Y2)
%CREATEFIGURE(X1,Y1,X2,Y2)
%  X1:  vector of x data
%  Y1:  vector of y data
%  X2:  vector of x data
%  Y2:  vector of y data

%  Auto-generated by MATLAB on 30-Nov-2012 22:39:08

% Create figure
figure1 = figure();

% Create axes
axes1 = axes('Parent',figure1);
box(axes1,'on');
hold(axes1,'all');

% Create plot
plot(X1,Y1,'Color',[0 0 1]);

% Create xlabel
xlabel('¦Ë*£¨Np(1-p)£©^0.5','FontSize',16);

% Create ylabel
ylabel('¦Ñ*£¨Np(1-p)£©^0.5','FontSize',16);

% Create plot
plot(X2,Y2,'LineStyle','--','Color',[1 0 0]);
h=gcf;
end
%% mean-square radius of gyration
% function radiusVsDegree(bacteriaFrameInfo,clusterTree,bioTree)
%                  TYPE 1 partly distance
% distMatrix=full(clusterTree.distMatrix);
% bacteriaList=clusterTree.bacteriaList;
% orderNum=1:size(bacteriaList,1);
% orderNum((bacteriaList(:,1)+bacteriaList(:,4)-1)~=numel(bacteriaFrameInfo))=[];
% newList=bacteriaList(orderNum,:);
% matchNum=zeros(1,numel(orderNum));
% for i=1:size(newList,1)
%     bacteriaListI=newList(i,:);
%     matchNum(i)=find( (bacteriaFrameInfo{end}.bacteriaInfo(:,1)==bacteriaListI(1) & bacteriaFrameInfo{end}.bacteriaInfo(:,2)==bacteriaListI(2) & bacteriaFrameInfo{end}.bacteriaInfo(:,3)==bacteriaListI(3)) ==1);
% end
% degreeRadius=zeros(2,size(bacteriaList,1));
% for i=1:size(bacteriaList,1)
%     iLine=distMatrix(i,:);
%     degreeRadius(1,i)=numel(iLine(iLine==1));
%     iLine=iLine(orderNum);
%     newOrder=matchNum(iLine);
%     if numel(newOrder)>=2
%         centroidInfo=[];
%         for j=1:numel(newOrder)
%             centroidInfo(j,:)=bacteriaFrameInfo{end}.centroidInfo(newOrder(j),:);
%         end
%         degreeRadius(2,i)=getSquareRadius(centroidInfo);
%         if degreeRadius(1,i)==3 && degreeRadius(2,i)>=800
%             p=1;
%         end
%     else
%         degreeRadius(1,i)=0;
%         continue
%     end
% end
% end
% function radius=getSquareRadius(centroidInfo)
% centroidPos=[mean(centroidInfo(:,1)),mean(centroidInfo(:,2))];
% radius=(mean((centroidInfo(:,1)-centroidPos(1)).^2+(centroidInfo(:,2)-centroidPos(2)).^2)).^(1/2);
% end
function p
t=[];
degreeRadius(:,degreeRadius(2,:)==0)=[];
 for i=2:max(degreeRadius(1,:))
 t(i)=mean(degreeRadius(2,degreeRadius(1,:)>=i-3 & degreeRadius(1,:)<=i+3));
 end
 t(2,:)=1:max(degreeRadius(1,:));
 t(:,isnan(t(1,:)))=[];
 createAvesquareOfRadiusGyrationFigure(t(2,:),t(1,:))
end
function createAvesquareOfRadiusGyrationFigure(X1, Y1)
%CREATEFIGURE(X1,Y1)
%  X1:  vector of x data
%  Y1:  vector of y data

%  Auto-generated by MATLAB on 29-Mar-2013 21:12:36

% Create figure
figure1 = figure;

% Create axes
axes1 = axes('Parent',figure1,'YScale','log','YMinorTick','on',...
    'XScale','log',...
    'XMinorTick','on');
box(axes1,'on');
hold(axes1,'all');

% Create loglog
loglog(X1,Y1);

% Create xlabel
xlabel('degree','FontSize',20);

% Create ylabel
ylabel('ave square of radius gyration','FontSize',20);
end
function radiusVsDegree(clusterTree,bioTree)
distMatrix=full(clusterTree.distMatrix);
bacteriaList=clusterTree.bacteriaList;
lastCentroidInfo=zeros(size(distMatrix,1),2);
for i=1:size(bacteriaList,1)
    iList=bacteriaList(i,:);
    if iList(3)==0
        lastCentroidInfo(i,:)=bioTree{iList(1)}.root{iList(2)}.traceInfo.measurment{iList(4)}.Centroid;
    end
    if iList(3)~=0
        lastCentroidInfo(i,:)=bioTree{iList(1)}.node{iList(2)}.Out{iList(3)}.traceInfo.measurment{iList(4)}.Centroid;
    end
end
centroidDist=pdist2(lastCentroidInfo,lastCentroidInfo);
degreeRadius=zeros(2,size(distMatrix,1));
for i=1:size(degreeRadius,2)
    iLine=distMatrix(i,:);
    degreeRadius(1,i)=numel(iLine(iLine==1));
    if degreeRadius(1,i)~=0 && degreeRadius(1,i)~=1
    targetMatrix=centroidDist(iLine,iLine);
    degreeRadius(2,i)=mean(targetMatrix(targetMatrix~=0));
    end
end
end